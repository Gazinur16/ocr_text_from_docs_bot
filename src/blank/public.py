from emoji import emojize

from src.core.const import PublicTgBotCommands, TypesOfFilesForConverting


class PublicTgBotBlank:

    @classmethod
    def command_to_desc(cls) -> dict[str, str]:
        return {
            PublicTgBotCommands.support: emojize(":red_heart: –ü–æ–¥–¥–µ—Ä–∂–∫–∞"),
            PublicTgBotCommands.about: emojize(":information: –ü–æ–¥—Ä–æ–±–Ω–µ–µ"),
            PublicTgBotCommands.start: emojize(":rocket: –ù–∞—á–∞—Ç—å")
        }

    @classmethod
    def error(cls) -> str:
        res = ":warning: <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø–æ–ª–∞–¥–∫–∞</b> :warning:"
        res += "\n\n:wrench: –ú—ã —É–∂–µ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –µ—ë"
        res += (
            f"\n\n‚Äî –î–ª—è –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å—ã –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å"
            f" –≤ <a href='https://t.me/nurtdinov_gt'>–ø–æ–¥–¥–µ—Ä–∂–∫—É</a>"
        )
        return emojize(res.strip())

    @classmethod
    def but_support(cls) -> str:
        return emojize(":red_heart: –ü–æ–¥–¥–µ—Ä–∂–∫–∞")

    @classmethod
    def start(cls) -> str:
        return emojize(":waving_hand: –ü—Ä–∏–≤–µ—Ç, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ PDF –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∏ —è –∏–∑–≤–ª–µ–∫—É –∏–∑ –Ω–µ–≥–æ —Ç–µ–∫—Å—Ç.")

    @classmethod
    def support(cls) -> str:
        res = f"ü¶¶ –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ <a href='https://t.me/nurtdinov_gt'>–ø–æ–¥–¥–µ—Ä–∂–∫—É</a>"
        res += f"\n\n:link: https://t.me/nurtdinov_gt"
        return emojize(res.strip())

    @classmethod
    def about(cls) -> str:
        res = f":alien_monster: <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:</b>\n"
        res += f"\n–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –∏–∑–≤–ª–µ–∫–∞—Ç—å —Ç–µ–∫—Å—Ç –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."
        res += f"\n\n<b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:</b>"
        res += f"\n- –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (JPG, PNG)"
        res += f"\n- –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ –¥–æ–∫—É–º–µ–Ω—Ç—ã —Ñ–æ—Ä–º–∞—Ç–∞: DOCX, TXT, MD"
        res += f"\n\n<b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?</b>"
        res += f"\n1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ PDF-–¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º."
        res += f"\n2. –ë–æ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç —Ñ–∞–π–ª –∏ –ø–æ–∫–∞–∂–µ—Ç –≤–∞–º —Ç–µ–∫—Å—Ç."
        res += f"\n3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ."
        res += (f"\n\n:link: <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b> https://t.me/nurtdinov_gt"
                f"\n:octopus: <b>–ö–æ–¥ –ø—Ä–æ–µ–∫—Ç–∞:</b> https://github.com/Gazinur16/ocr_text_from_docs_bot.git")
        return emojize(res.strip())

    @classmethod
    def image_is_loaded(cls) -> str:
        res = f":paperclip: <b>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!</b>"
        res += f"\n\n:magnifying_glass_tilted_left: –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
        return emojize(res.strip())

    @classmethod
    def difficult_case_please_wait(cls) -> str:
        res = f":sad_but_relieved_face: <b>–ù–µ–ø—Ä–æ—Å—Ç–æ–π —Å–ª—É—á–∞–π.</b>"
        res += f"\n\n:hourglass_done: –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â–µ –Ω–µ–º–Ω–æ–≥–æ..."
        return emojize(res.strip())

    @classmethod
    def doc_is_loaded(cls) -> str:
        res = f":paperclip: <b>–î–æ–∫—É–º–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω!</b>"
        res += f"\n\n:magnifying_glass_tilted_left: –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ..."
        return emojize(res.strip())

    @classmethod
    def failed_to_load_the_image(cls) -> str:
        res = f":warning: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        return emojize(res.strip())

    @classmethod
    def convert_the_last_file(cls) -> str:
        res = f":sad_but_relieved_face: –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –≤–∞–º–∏ —Ñ–∞–π–ª."
        res += f"\n\n:information: –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç —Å —Ç–µ–∫—Å—Ç–æ–º —Å–Ω–æ–≤–∞."
        return emojize(res.strip())

    @classmethod
    def not_found_the_full_text(cls) -> str:
        res = f":sad_but_relieved_face:  –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–µ–∫—Å—Ç."
        res += f"\n\n:information: –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç —Å —Ç–µ–∫—Å—Ç–æ–º —Å–Ω–æ–≤–∞."
        return emojize(res.strip())

    @classmethod
    def text_is_successfully_converted(cls, file_type: str) -> str:
        res=f":check_mark_button: –¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ —Ñ–æ—Ä–º–∞—Ç {file_type.upper()}"
        return emojize(res.strip())

    @classmethod
    def failed_to_find_the_text_in_the_photo(cls) -> str:
        res = f":sad_but_relieved_face: –£–ø—Å—Å, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–µ–∫—Å—Ç –Ω–∞ —Ñ–æ—Ç–æ"
        res += f"\n\n:information:–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Ç–µ–∫—Å—Ç –Ω–∞ —Ñ–æ—Ç–æ –≤–∏–¥–Ω–æ —Ö–æ—Ä–æ—à–æ, –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        return emojize(res.strip())

    @classmethod
    def failed_to_find_the_text_in_pdf(cls) -> str:
        res = f":sad_but_relieved_face: –£–ø—Å—Å, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–µ–∫—Å—Ç –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ"
        res += f"\n\n:information:–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç, –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        return emojize(res.strip())

    @classmethod
    def the_text_was_cut(cls) -> str:
        res = f"\n:warning: <b>–¢–µ–∫—Å—Ç –±—ã–ª –æ–±—Ä–µ–∑–∞–Ω –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è Telegram </b>"
        res += f"\n\n:down_arrow: –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞, –º–æ–∂–Ω–æ —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –≤ –æ–¥–Ω–æ–º –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω—ã—Ö –Ω–∏–∂–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤."
        return emojize(res.strip())

    @classmethod
    def convert_and_download_file(cls) -> str:
        res = f":down_arrow: <b>–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.</b>"
        return emojize(res.strip())

    @classmethod
    def convert_to(cls, type_file: TypesOfFilesForConverting) -> str:
        if type_file is TypesOfFilesForConverting.docx:
            res = f":page_facing_up: –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ {TypesOfFilesForConverting.docx.upper()} (word)"
        elif type_file is TypesOfFilesForConverting.txt:
            res = f":spiral_notepad: –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ {TypesOfFilesForConverting.txt.upper()} (–±–ª–æ–∫–Ω–æ—Ç)"
        else:
            res = f":memo: –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ {TypesOfFilesForConverting.md.upper()} (markdown)"

        return emojize(res.strip())


def __example():
    pass


if __name__ == '__main__':
    __example()
